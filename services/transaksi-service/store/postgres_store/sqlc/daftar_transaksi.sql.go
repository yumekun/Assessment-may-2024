// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: daftar_transaksi.sql

package sqlc

import (
	"context"
)

const createTransaksi = `-- name: CreateTransaksi :one
INSERT INTO daftar_transaksi (
    id,
    jenis_transaksi,
    nominal,
    nomor_rekening
) VALUES (
    $1, $2, $3,$4
) RETURNING id, nomor_rekening, jenis_transaksi, nominal
`

type CreateTransaksiParams struct {
	ID             string `json:"id"`
	JenisTransaksi string `json:"jenis_transaksi"`
	Nominal        int64  `json:"nominal"`
	NomorRekening  string `json:"nomor_rekening"`
}

func (q *Queries) CreateTransaksi(ctx context.Context, arg CreateTransaksiParams) (DaftarTransaksi, error) {
	row := q.db.QueryRowContext(ctx, createTransaksi,
		arg.ID,
		arg.JenisTransaksi,
		arg.Nominal,
		arg.NomorRekening,
	)
	var i DaftarTransaksi
	err := row.Scan(
		&i.ID,
		&i.NomorRekening,
		&i.JenisTransaksi,
		&i.Nominal,
	)
	return i, err
}

const getDaftarTransaksi = `-- name: GetDaftarTransaksi :many
SELECT id, id_pelanggan, nomor_rekening, saldo FROM daftar_akun 
WHERE nomor_rekening = $1
`

func (q *Queries) GetDaftarTransaksi(ctx context.Context, nomorRekening string) ([]DaftarAkun, error) {
	rows, err := q.db.QueryContext(ctx, getDaftarTransaksi, nomorRekening)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DaftarAkun{}
	for rows.Next() {
		var i DaftarAkun
		if err := rows.Scan(
			&i.ID,
			&i.IDPelanggan,
			&i.NomorRekening,
			&i.Saldo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
